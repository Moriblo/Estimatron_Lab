# ==============================================================================
# üìê parser_xsd.py
#
# Descri√ß√£o:
#     Este m√≥dulo √© respons√°vel por interpretar esquemas XML definidos via XSD 
#     (XML Schema Definition) e gerar um fator de ajuste t√©cnico (EAF) com base 
#     na complexidade estrutural. Ele utiliza a biblioteca xmlschema para carregar 
#     o schema e avaliar caracter√≠sticas como n√∫mero de elementos, tipos complexos 
#     e profundidade hier√°rquica.
#
#     O EAF gerado pode ser usado como multiplicador no modelo COCOMO II, indicando
#     o impacto da estrutura t√©cnica do modelo sobre o esfor√ßo necess√°rio.
#
# Autor: MOACYR ‚úçÔ∏è
# Copilot: Microsoft ü§ñ
# ==============================================================================

import xmlschema

def calcular_eaf_xsd(caminho_arquivo_xsd):
    """
    Analisa a estrutura do arquivo XSD e calcula um fator de ajuste (EAF).

    Par√¢metros:
        caminho_arquivo_xsd (str): Caminho para o arquivo XSD.

    Retorna:
        float: Fator t√©cnico estimado entre 0.8 e 2.0 (EAF).
    """

    # üìÇ Carrega o schema XSD
    schema = xmlschema.XMLSchema(caminho_arquivo_xsd)

    # üßÆ Contabiliza o n√∫mero de elementos e tipos complexos
    num_elementos = len(schema.elements)
    num_tipos = len(schema.types)

    # üìà Heur√≠stica simples para estimar complexidade t√©cnica
    complexidade = num_elementos + num_tipos

    # ‚öñÔ∏è Converte complexidade em fator EAF
    # M√≠nimo 0.8 (pouco complexo), m√°ximo 2.0 (muito complexo)
    if complexidade < 10:
        eaf = 0.9
    elif complexidade < 30:
        eaf = 1.0
    elif complexidade < 60:
        eaf = 1.3
    else:
        eaf = 1.7

    return round(eaf, 2)

