###############################################################################
# main.py
# üéØ Estimatron - Interface Principal via Streamlit
#
# Executa o estimador COCOMO II com entrada de arquivo XML exportado do draw.io.
# O XSD √© gerado automaticamente com base nos blocos textuais detectados.
# Exibe diagn√≥sticos t√©cnicos e realiza estimativa completa.
# Remove os arquivos tempor√°rios ao final do processo.
#
# Autor: MOACYR + Copilot
# Vers√£o: 2.3
# Data: 2025-07-15
###############################################################################

import streamlit as st
import os
from io import BytesIO

from modules.parser_xml import extrair_loc_drawio
from modules.parser_xsd import calcular_eaf_xsd
from modules.cocomo_model import calcular_cocomo
from modules.validator_xml import validar_xml_drawio

# üóÉÔ∏è Constantes para arquivos tempor√°rios
XML_TEMP = "temp_modelo.xml"
XSD_TEMP = "temp_modelo.xsd"

def gerar_xsd_basico(blocos, xsd_saida):
    """
    Gera um arquivo XSD b√°sico com base na lista de blocos textuais extra√≠dos do XML.

    Par√¢metros:
        blocos (List[str]): Lista de nomes de elementos textuais.
        xsd_saida (str): Caminho do arquivo XSD de sa√≠da.

    Retorna:
        None. O arquivo √© salvo no disco.
    """
    try:
        with open(xsd_saida, "w", encoding="utf-8") as f:
            f.write('<?xml version="1.0"?>\n')
            f.write('<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">\n')
            for nome in blocos:
                f.write(f'  <xs:element name="{nome}" type="xs:string"/>\n')
            f.write('</xs:schema>\n')
    except Exception as e:
        st.error(f"‚ö†Ô∏è Erro ao gerar XSD: {e}")

def limpar_arquivos_temp():
    """
    Remove os arquivos tempor√°rios gerados durante o processo de estimativa.

    Arquivos removidos:
        - temp_modelo.xml
        - temp_modelo.xsd

    Retorna:
        None.
    """
    for arquivo in [XML_TEMP, XSD_TEMP]:
        if os.path.exists(arquivo):
            try:
                os.remove(arquivo)
            except Exception as e:
                st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel remover '{arquivo}': {e}")

# üé® Interface do Streamlit
st.set_page_config(page_title="Estimativa COCOMO II", layout="centered")
st.title("üìê Estimador COCOMO II baseado em XML")
st.markdown("Carregue seu modelo UML exportado do draw.io para iniciar:")

# üìÇ Upload do XML
xml_file = st.file_uploader("üìÇ Upload do modelo UML (XML)", type=["xml"])
salario = st.number_input("üí∞ Sal√°rio mensal (R$)", min_value=1000, value=12000)

if xml_file:
    try:
        xml_bytes = xml_file.read()
        with open(XML_TEMP, "wb") as f:
            f.write(xml_bytes)

        # üîç Diagn√≥stico t√©cnico do XML
        diagnostico = validar_xml_drawio(XML_TEMP)

        st.markdown("### üß™ Diagn√≥stico t√©cnico do XML")
        st.write(f"üìÑ Arquivo: `{diagnostico['arquivo']}`")
        st.write(f"‚úÖ Validade estrutural: **{'V√°lido' if diagnostico['valido'] else 'Inv√°lido'}**")
        st.write(f"üè∑Ô∏è Tipo de raiz detectada: `{diagnostico.get('tipo_raiz', 'N√£o identificada')}`")
        st.write(f"üî¢ Total de c√©lulas (mxCell): **{diagnostico['num_celulas']}**")
        st.write(f"‚úèÔ∏è Blocos com texto (LOC candidatos): **{diagnostico['num_blocos_com_texto']}**")
        if diagnostico["erro"]:
            st.error(f"‚ùå Erro detectado: {diagnostico['erro']}")

        dados_validos = diagnostico["valido"] and diagnostico["num_blocos_com_texto"] > 0
        loc, eaf = 0, 1.00

        if dados_validos:
            try:
                resultado = extrair_loc_drawio(XML_TEMP)
                loc = resultado["loc"]
                blocos = resultado["blocos"]

                gerar_xsd_basico(blocos, XSD_TEMP)
                eaf_info = calcular_eaf_xsd(XSD_TEMP)
                eaf = eaf_info["eaf"]

                st.markdown("### üß™ Diagn√≥stico t√©cnico do XSD gerado")
                st.write(f"üìÑ Arquivo: `{XSD_TEMP}`")
                st.write(f"üî¢ Elementos globais: **{eaf_info['elementos_globais']}**")
                st.write(f"üìÇ Elementos internos: **{eaf_info['elementos_internos']}**")
                st.write(f"üß© M√≥dulos (complexTypes): **{eaf_info['complex_types']}**")
                st.write(f"üßÆ Total de elementos: **{eaf_info['total_elementos']}**")
                st.write(f"üìä Faixa EAF atribu√≠da: **{eaf}**")

            except Exception as e:
                st.error(f"‚ö†Ô∏è Erro durante an√°lise XSD: {e}")
        else:
            st.warning("‚ö†Ô∏è Arquivo XML n√£o possui estrutura ou blocos textuais suficientes para estimativa.")

        if st.button("üöÄ Gerar estimativa"):
            if dados_validos:
                try:
                    esforco, prazo, custo = calcular_cocomo(loc, eaf, salario)
                    st.success("‚úÖ Estimativa conclu√≠da!")
                    st.write(f"üî¢ LOC estimado: **{loc}**")
                    st.write(f"‚öôÔ∏è Fator de ajuste EAF: **{eaf}**")
                    st.write(f"üß† Esfor√ßo estimado: **{esforco} pessoa-m√™s**")
                    st.write(f"üìÜ Prazo estimado: **{prazo} meses**")
                    st.write(f"üí∏ Custo total: **R${custo:.2f}**")
                except Exception as e:
                    st.error(f"‚ùå Erro ao gerar estimativa: {e}")
                limpar_arquivos_temp()
            else:
                st.error("‚ùå Estimativa n√£o gerada. Verifique a estrutura do XML e os blocos detectados.")
    except Exception as e:
        st.error(f"‚ö†Ô∏è Erro ao processar o arquivo XML: {e}")

